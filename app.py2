from flask import Flask,  jsonify,  abort
from flask import request

import re
import sys

import pickledb 

app = Flask(__name__)

ONE_MB = 1000000

DICT_NAME = 'objects'

objects = pickledb.load('objects.db', False) 

if objects.get(DICT_NAME) == None:
    objects.dcreate(DICT_NAME)


@app.route('/')
def index():
    return "Hello, World!"

@app.route('/api/objects', methods=['GET'])
def get_objects():
    listOfKeys = objects.dkeys(DICT_NAME)

    return jsonify(listOfKeys)

@app.route('/api/objects/<string:object_key>', methods=['GET'])
def get_object(object_key):
    if re.match('^[a-zA-Z0-9]*$',  object_key) == None or len(object_key) > 100:
        abort(400)
    
    if not check_if_key_exists(object_key):
        abort(404)
        
    object = objects.dget(DICT_NAME,  object_key)
    
    return jsonify(object)

@app.route('/api/objects/<string:object_key>', methods=['PUT'])
def update_object(object_key):
    if re.match('^[a-zA-Z0-9]*$',  object_key) == None or len(object_key) > 100:
        abort(400)
    
    request.get_data()
    sizeOfData = sys.getsizeof(request.data)
    
    if sizeOfData > ONE_MB:
        return '',  413
        
    objects.dadd(DICT_NAME,  (object_key,  request.data))
    objects.dump()
    
    return '', 201

@app.route('/api/objects/<string:object_key>', methods=['DELETE'])
def delete_object(object_key):
    
    if not check_if_key_exists(object_key):
        abort(404)
    
    objects.dpop(DICT_NAME,  object_key)
    objects.dump()
    
    return ""
    
def check_if_key_exists(object_key):
    # normally I would use this one, but this call seems to be broken
    # I could fix the pickleDB (it calls the dictionary on non existent key and raises Key Error expetion)
    # For the sake of the exercise, I will retrieve a list of keys instead, and iterate over it
    # I know it's not very efficient, later I'd change it to actual dictionary
    # Michal
    #return objects.dexists(DICT_NAME,  object_key)
    
    for key in objects.dkeys(DICT_NAME):
        if object_key == key:
            return 1
    
    return 0
if __name__ == '__main__':
    app.run(debug=True)
